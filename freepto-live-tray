#!/usr/bin/env python2
'''
GTK helper to know persistence status
'''
from subprocess import call, check_output, CalledProcessError, Popen
import logging
logging.basicConfig(level=logging.INFO)

import gtk
import gobject


### Check-persistence {{{
def get_root_device():
    try:
        return check_output(["check-persistence", "get-root-device"]).strip()
    except CalledProcessError:
        return None


def get_persistence_status():
    '''return one of MOUNTED, LIVE, ABSENT'''
    def sub_check(subcmd):
        ret = call(['check-persistence', subcmd])
        if ret == 0:
            return True
        if ret == 10:
            return False
        raise Exception('Error checking persistence status')
    #esco subito con ABSENT per semplificarmi la vita durante i test
    #return 'ABSENT'
    if sub_check('is-mounted'):
        return 'MOUNTED'
    if sub_check('has-avail-persistence'):
        return 'LIVE'
    return 'ABSENT'
### Check-persistence }}}


title = "Persistence helper"

class AbsentWindow(gtk.Window):

    def __init__(self, icon):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.set_border_width(10)
        self.icon = icon
        
        if get_root_device() is not None:
            box = gtk.VBox(False, 0)
            label = gtk.Label("Persistence not available " +
                                      "(do you want to create it?)")
            button = gtk.Button("Create persistence")
            button.connect('click', self.create_persistence)
            
            box.add(label)
            self.add(box)
        else:
            label = gtk.Label("Disk not found")
            self.add(label)

    def create_persistence(self, widget, data=None):
        command = ["makepersistence", "-r", "%s2" % get_root_device()]
        if os.getuid() != 0:
            command = ["su-to-root", "-X", "-c", " ".join(command)]

        self.popen = Popen(command)
        self.heck_persistence()

    def check_persistence(self):
        code = self.popen.poll()
        if code is None:
            gobject.timeout_add_seconds(5, self.check_persistence)
        else:
            self.post_persistence(code)

    def post_persistence(self, code):
        '''
        cose da fare dopo che lo script makepersistence ha fatto il suo
        sporco lavoro.
        attualmente ricontrollo lo status della persistenza, aggiorno
        l'icona e chiudo il terminale
        '''
        icon.status = get_persistence_status()
        icon.refresh_icon()
        if code == 0:
            msg = gtk.Label()
            msg.set_markup("Esecuzione completa\n\n" +
                           "sembra essere andato tutto bene\n" +
                           "guarda la finestra per esserne sicuro")
        else:
            msg = gtk.Label()
            msg.set_markup("Errori nell'esecuzione\n\n" +
                           "codice %d" % code)
        self.add(msg)


class MountedWindow(gtk.Window):

    def __init__(self):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.set_border_width(10)

        label = gtk.Label("Persistence mounted.")
        self.add(label)

class LiveWindow(gtk.Window):

    def __init__(self):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.set_border_width(10)

        label = gtk.Label("Persistence not mounted, but available " +
                                  "(maybe you want to reboot?)")
        self.add(label)



class LiveIcon:
    '''
    A status icon with 3 possible statuses:
        MOUNTED
        LIVE
        ABSENT
    '''

    def __init__(self):
        self.icon = gtk.StatusIcon()
        self.status = None
        self.refresh_icon()
        try:
            self.status = get_persistence_status()
        except Exception:
            logging.exception("Status unknown")
        self.refresh_icon()
        self.icon.connect("activate", self.show_popup)
        self.icon.connect("popup-menu", self.right_click_event)

    def refresh_icon(self):
        if self.status == 'MOUNTED':
            self.icon.set_from_stock(gtk.STOCK_YES)
            self.icon.set_tooltip("Persistence mounted")
        elif self.status == 'LIVE':
            self.icon.set_from_stock(gtk.STOCK_NO)
            self.icon.set_tooltip("Persistence not mounted, but available " +
                                  "(maybe you want to reboot?)")
        elif self.status == 'ABSENT':
            self.icon.set_from_stock(gtk.STOCK_CDROM)
            self.icon.set_tooltip("Persistence not available " +
                                  "(do you want to create it?)")
        else:
            self.icon.set_from_stock(gtk.STOCK_NEW)
            self.icon.set_tooltip('Checking...')

    def right_click_event(self, icon, button, time):
        menu = gtk.Menu()
        quit = gtk.MenuItem("Quit")
        quit.connect("activate", gtk.main_quit)
        menu.append(quit)
        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu,
                   button, time, self.icon)

    def show_popup(self, widget):
        '''
        this is the main informational popup; will show basic informational
        and act as "wizard"
        '''
        if self.status == 'ABSENT':
            window = AbsentWindow(self)
        elif self.status == 'LIVE':
            window = LiveWindow()
        else:
            window = MountedWindow()
        window.show_all()


if __name__ == '__main__':
    import os
    os.environ['PATH'] += ':.'
    icon = LiveIcon()
    gtk.main()

# vim: set ft=python ts=4 sw=4 et fdm=marker:
